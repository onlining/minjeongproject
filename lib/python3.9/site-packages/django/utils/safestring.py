"""
Functions for working with "safe strings": strings that can be displayed safely
without further escaping in HTML. Marking something as a "safe string" means
that the producer of the string has already turned characters that should not
be interpreted by the HTML engine (e.g. '<') into the appropriate entities.

안전한 문자열 작업을 위한 함수 및 클래스 html에서 더 이상 벗어나지 않고 안전하게 표시할 수 있는 문자열 무언가를 안전한 문자열로 표시한다는 것은 문자열 생성자가 이미 html엔진(예:<)으로 해석해서는 안되는 문자를 해당 엔티티로 변환했음을 의미한다.

"""

from functools import wraps


class SafeData:
    def __html__(self):
        """
        Return the html representation of a string for interoperability.

        This allows other template engines to understand Django's SafeData.
        """
        return self
'''
class safestring(source) str 구체적 안전한으로 표시된 서브 클래스는 html 출력을 위해 더 이스케이프를 필요로 하지 않는다)

'''

class SafeString(str, SafeData):
    """
    A str subclass that has been specifically marked as "safe" for HTML output
    purposes.
    """
    def __add__(self, rhs):
        """
        Concatenating a safe string with another safe bytestring or
        safe string is safe. Otherwise, the result is no longer safe.
        """
        t = super().__add__(rhs)
        if isinstance(rhs, SafeData):
            return SafeString(t)
        return t

    def __str__(self):
        return self


SafeText = SafeString  # For backwards compatibility since Django 2.0.


def _safety_decorator(safety_marker, func):
    @wraps(func)
    def wrapped(*args, **kwargs):
        return safety_marker(func(*args, **kwargs))
    return wrapped

'''
(html)출력을 위해 문자열을 안전한것으로 명시적으로 표시하십시오. 반환된 객체는 문자열이 적절한 모든 곳에서 사용ㄷ뢸 수 있습니다.단일 문자열에서 여러번 호출할 수 있습니다
데코레이터로도 사용할 수 있습니다 html 조각을 만들려면 일반적으로 django.utils.html,format_html()대신 사용해야합니다. safe로 표시된 문자열은 수정하면 다시 안전하지 않게됩니다. 예를 들면 다음과 같습니다
'''
def mark_safe(s):
    """
    Explicitly mark a string as safe for (HTML) output purposes. The returned
    object can be used everywhere a string is appropriate.

    If used on a method as a decorator, mark the returned data as safe.

    Can be called multiple times on a single string.
    """
    if hasattr(s, '__html__'):
        #s에 __html__이 있는 지 확인하기
        return s
    if callable(s):
        return _safety_decorator(mark_safe, s)
        #전달받은 s가 호출가능한지 여부를 판단한다.
    return SafeString(s)
